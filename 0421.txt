npx create-react-app .

app.test 지우고





import React, {Fragment, Component} from 'react';



//////////////////////////////////



// 컴포넌트 만드는 방법

// function Profile(props){

//     const style = {
//         backgroundColor:props.bg, // props 부모가 자식에게 넘겨주는 값
//         color: props.color
//     }
//     return <h1 style={style}>{myName}{myAge}</h1>
// } // 함수로 작성 예)


class Profile extends Component {
    static: defaultProps = {
        bg : "blue",
        coloe: "white"
    }

    render(){
        const {bg, color} = this.props;

        const style = {
            backgroundColor: bg,
            color: color
        }
        return <h1 style={style}>{myName}{myAge}</h1>
    }
} 


// 클래스로 작성 예


const myName = "jack";
const myAge = 20;

const view = <Fragment>
<h1 className="crimson">Hello World</h1>
<h1>Okay</h1>
<h1 style={{backgroundColor: "crimson", color:"white"}}>{myName} {myAge}</h1>
<Profile bg="crimson" color="white"></Profile>
</Fragment>




// jsx 문법

// const myName = "jack";
// const myAge = 20;

// const view = <Fragment>
// <h1 className="crimson">Hello World</h1>
// <h1>Okay</h1>
// <h1 style={{backgroundColor: "crimson", color:"white"}}>{myName} {myAge}</h1>
// </Fragment>

// const view = <div><h1>Hello World</h1><h1>Okay</h1></div>

// const view2 = React.createElement(
//     'hi',
//     {className: 'greating'},
//     'Hello World'
// );





////////////////////////////// App.js


import React, { Component, Fragment } from 'react';

import './App.css';


// state 전달받은 값, 내부적으로만 가짐(수정X) 
class App extends Component { 
  state = {
    count: 0,
  } // constructor 밖에서 초기화작업

  // constructor(props){ // constructor 안에 this 는 App
  //   super(props);
  // //   this.state = {
  // //     count : 0, //  constructor 안에서 초기화작업
  // this.increaseCount =this.increaseCount.bind(this);
  // this.decreastCount =this.decreastCount.bind(this);
  // //   }
  // } 

  // increaseCount(){

  //   console.log('increaseCount')
  //   // console.log(this);
  //   // this.state.count = this.state.count+1;
  //   this.setState({
  //     count: this.state.count+1
  //   })

  // }

  // decreastCount(){

  //   console.log('decreastCount')
  //   // console.log(this);
  //   // this.state.count = this.state.count-1;
  //   this.setState({
  //     count: this.state.count-1
  //   })
  // }



  increaseCount = ()=>{

    console.log('increaseCount')
    // console.log(this);
    // this.state.count = this.state.count+1;
    this.setState({
      count: this.state.count+1
    })

  }

  decreastCount = ()=>{

    console.log('decreastCount')
    // console.log(this);
    // this.state.count = this.state.count-1;
    this.setState({
      count: this.state.count-1
    })
  }


  render() { // 어떤것을 보여줄지 안보여줄지

    const {count} = this.state;

    // if(count > 10){
    //   return <h1>초과입니다.</h1>
    // }
    
    // 위 아래 같음

    // count>10?
    // <h1>초과입니다.</h1>:
  

    return (
      count>10?
      <h1>초과입니다.</h1>:
      <Fragment>
      <h1>{count}</h1>
      <button onClick={this.increaseCount}>Up</button>
      <button onClick={this.decreastCount}>Down</button>   
      </Fragment>  
    );

  }
}

export default App;








// *** 콜백 ***

function myTestfunc(cb){
    console.log("myTestfunc")
    cb();
}


var printA = function(){
    console.log('a')
};

myTestfunc(printA);

